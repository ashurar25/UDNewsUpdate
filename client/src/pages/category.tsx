import { useParams } from "wouter";
import { useQuery } from "@tanstack/react-query";
import { BreakingTicker } from "@/components/news/breaking-ticker";
import { CategoryTabs } from "@/components/news/category-tabs";
import { NewsCard } from "@/components/news/news-card";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import type { Article, Category } from "@shared/schema";

export default function CategoryPage() {
  const { slug } = useParams();

  const { data: category, isLoading: categoryLoading } = useQuery<Category>({
    queryKey: ["/api/categories", slug],
    enabled: !!slug,
  });

  const { data: articles = [], isLoading: articlesLoading } = useQuery<Article[]>({
    queryKey: ["/api/categories", category?.id, "articles"],
    enabled: !!category?.id,
    queryFn: () => fetch(`/api/categories/${category?.id}/articles`).then(res => res.json()),
  });

  const { data: allCategories = [] } = useQuery<Category[]>({
    queryKey: ["/api/categories"],
  });

  if (categoryLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <main className="container mx-auto px-4 py-8">
          <div className="animate-pulse">
            <div className="h-8 bg-gray-300 rounded mb-4 w-1/3"></div>
            <div className="h-4 bg-gray-300 rounded mb-8 w-2/3"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {Array.from({ length: 6 }, (_, i) => (
                <div key={i} className="bg-white rounded-lg shadow-md overflow-hidden">
                  <div className="w-full h-48 bg-gray-300"></div>
                  <div className="p-5">
                    <div className="h-4 bg-gray-300 rounded mb-2"></div>
                    <div className="h-6 bg-gray-300 rounded mb-2"></div>
                    <div className="h-12 bg-gray-300 rounded"></div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </main>
      </div>
    );
  }

  if (!category) {
    return (
      <div className="min-h-screen bg-gray-50">
        <main className="container mx-auto px-4 py-8">
          <div className="text-center py-12">
            <div className="text-6xl mb-4">‚ùì</div>
            <h1 className="text-3xl font-bold text-gray-900 mb-4">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</h1>
            <p className="text-gray-600 mb-8">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
            <Button variant="outline">
              <a href="/news">‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡∏π‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</a>
            </Button>
          </div>
        </main>
      </div>
    );
  }

  const getCategoryIcon = (slug: string) => {
    const iconMap: { [key: string]: string } = {
      politics: "üèõÔ∏è",
      economy: "üí∞",
      sports: "‚öΩ",
      technology: "üíª",
      entertainment: "üé¨",
      health: "üè•",
      environment: "üåç",
    };
    return iconMap[slug] || "üì∞";
  };

  const getCategoryDescription = (slug: string) => {
    const descMap: { [key: string]: string } = {
      politics: "‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
      economy: "‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏®‡∏£‡∏©‡∏ê‡∏Å‡∏¥‡∏à ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏∏‡∏ô",
      sports: "‡∏Ç‡πà‡∏≤‡∏ß‡∏Å‡∏µ‡∏¨‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÅ‡∏•‡∏∞‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô",
      technology: "‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ ‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•",
      entertainment: "‡∏Ç‡πà‡∏≤‡∏ß‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á ‡∏î‡∏≤‡∏£‡∏≤ ‡∏†‡∏≤‡∏û‡∏¢‡∏ô‡∏ï‡∏£‡πå ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏á",
      health: "‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏™‡∏∏‡∏Ç",
      environment: "‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° ‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏£‡∏±‡∏Å‡∏©‡πå",
    };
    return descMap[slug] || "‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ";
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <BreakingTicker />
      <CategoryTabs />

      <main className="container mx-auto px-4 py-8">
        {/* Category Header */}
        <Card className="mb-8">
          <CardContent className="p-8">
            <div className="text-center">
              <div className="text-6xl mb-4">{getCategoryIcon(category.slug)}</div>
              <h1 className="text-4xl font-bold text-gray-900 mb-4">
                ‡∏Ç‡πà‡∏≤‡∏ß{category.name}
              </h1>
              <p className="text-lg text-gray-600 max-w-2xl mx-auto mb-6">
                {getCategoryDescription(category.slug)}
              </p>
              <div className="flex items-center justify-center space-x-4 text-sm text-gray-500">
                <span>{articles.length} ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°</span>
                <span>‚Ä¢</span>
                <span>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Articles */}
        {articlesLoading ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {Array.from({ length: 6 }, (_, i) => (
              <div key={i} className="bg-white rounded-lg shadow-md overflow-hidden animate-pulse">
                <div className="w-full h-48 bg-gray-300"></div>
                <div className="p-5">
                  <div className="h-4 bg-gray-300 rounded mb-2"></div>
                  <div className="h-6 bg-gray-300 rounded mb-2"></div>
                  <div className="h-12 bg-gray-300 rounded"></div>
                </div>
              </div>
            ))}
          </div>
        ) : articles.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {articles.map((article) => (
              <NewsCard
                key={article.id}
                article={article}
                category={category}
              />
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="text-6xl mb-4">{getCategoryIcon(category.slug)}</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î{category.name}
            </h3>
            <p className="text-gray-600 mb-8">
              ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ
            </p>
            <Button variant="outline">
              <a href="/news">‡∏î‡∏π‡∏Ç‡πà‡∏≤‡∏ß‡∏´‡∏°‡∏ß‡∏î‡∏≠‡∏∑‡πà‡∏ô</a>
            </Button>
          </div>
        )}

        {/* Other Categories */}
        <section className="mt-16">
          <h2 className="text-2xl font-bold text-gray-900 mb-6">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ</h2>
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4">
            {allCategories
              .filter(cat => cat.slug !== category.slug)
              .map((cat) => (
                <a
                  key={cat.slug}
                  href={`/category/${cat.slug}`}
                  className="bg-white rounded-lg p-4 text-center shadow-sm hover:shadow-md transition-shadow duration-300"
                >
                  <div className="text-2xl mb-2">{getCategoryIcon(cat.slug)}</div>
                  <div className="text-sm font-medium text-gray-900">{cat.name}</div>
                </a>
              ))}
          </div>
        </section>
      </main>
    </div>
  );
}
